{"version":3,"sources":["components/Header/Header.js","components/AddMovie/AddMovie.js","components/Details/Details.js","components/List/List.js","components/Footer/Footer.js","components/Edit/Edit.js","components/App/App.js","registerServiceWorker.js","index.js"],"names":["Header","className","Component","AddMovie","handleSubmit","event","preventDefault","newMovie","title","props","reduxState","setTitle","url","setURL","description","setDescription","genre","setGenre","dispatch","type","payload","history","push","onSubmit","this","id","onChange","target","value","clasName","name","onClick","connect","Details","movieToDetail","src","poster","style","width","height","alt","genres","map","calssName","List","film","movies","key","handleClick","Footer","Edit","class","defaultValue","for","App","to","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","rootSaga","fetchPosters","fetchGenres","postMovies","takeEvery","sagaMiddleware","createSagaMiddleware","Axios","get","response","put","data","action","post","storeInstance","createStore","combineReducers","applyMiddleware","logger","run","ReactDOM","render","store","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e85b423f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n    \n    render() {\n        return(\n            <div className=\"App-header\">\n                <h1 className=\"App-title\">Movie Night!</h1>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass AddMovie extends Component {\n    \n    \n//On form submit, creates an object out of input reducers \n//and dispatches payload to bbe added to the db\n//also clears the values in the input fields and navigates user back to the main page\n    handleSubmit = (event) => {\n        event.preventDefault();\n        let newMovie = {\n            title: this.props.reduxState.setTitle,\n            url: this.props.reduxState.setURL,\n            description: this.props.reduxState.setDescription,\n            genre: this.props.reduxState.setGenre\n        }\n        this.props.dispatch({type:'POST_MOVIE', payload: newMovie});\n        this.props.dispatch({type: 'CLEAR_FORMDATA'});\n        this.props.history.push('/');\n    }\n\n    render() {\n        return(\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"flexContainer\">\n                        <div id=\"ticket-stub\">\n                            <h3>Add a movie</h3>\n                        </div>\n                    <div className=\"formSpace\">\n                        <div className=\"textForm\">\n                            <label>Movie Name: </label>   \n                            <input className=\"inputStyle\" type=\"text\" onChange={(event) => this.props.dispatch({type:'SET_TITLE', payload: event.target.value})} />\n                        </div>\n                        <div className=\"textForm\">\n                            <label>Poster URL: </label>\n                            <input type=\"text\" onChange={(event) => this.props.dispatch({type:'SET_URL', payload: event.target.value})}/>\n                        </div>\n                        <div className=\"textForm\">\n                            <label>Movie Description: </label>\n                        </div>\n                        <textarea type=\"text\" className=\"description-textarea\" onChange={(event) => this.props.dispatch({type:'SET_DESCRIPTION', payload: event.target.value})}/>\n                    </div>\n                    <div clasName=\"form-space\">\n                    <label>Genre</label>\n                        <select name=\"genres\" onChange={(event) => this.props.dispatch({type:'SET_GENRE', payload: event.target.value})}>\n                            <option>Choose a genre</option>\n                            <option value=\"1\">Adventure</option>\n                            <option value=\"2\">Animated</option>\n                            <option value=\"3\">Biographical</option>\n                            <option value=\"4\">Comedy</option>\n                            <option value=\"5\">Disaster</option>\n                            <option value=\"6\">Drama</option>\n                            <option value=\"7\">Epic</option>\n                            <option value=\"8\">Fantasy</option>\n                            <option value=\"9\">Musical</option>\n                            <option value=\"10\">Romantic</option>\n                            <option value=\"11\">Science Fiction</option>\n                            <option value=\"12\">Space-Opera</option>\n                            <option value=\"13\">Superhero</option>\n                        </select>\n                    </div>\n                    </div>\n                    <div className=\"button-flex-row\">\n                        <button className=\"save-button\" type=\"submit\">Save</button>\n                        <button className=\"cancel-button\" onClick={(event)=> {this.props.dispatch({type: 'CLEAR_FORM_DATA'}); \n                                                    this.props.history.push('/')}}>\n                                                    Cancel\n                                                    </button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\n//loads redux state\nconst mapReduxStateToProps = (reduxState) => ({\n    reduxState\n  });\n\nexport default connect(mapReduxStateToProps)(AddMovie);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Details extends Component {\n    \n\n    render() {\n        return(\n            <div className=\"backing\">\n                <p id=\"title-text\">{this.props.reduxState.movieToDetail.title}</p>\n                <div className=\"detail-space\">\n                    <img src={this.props.reduxState.movieToDetail.poster} \n                                style = {{width: \"185px\", height: \"270px\"}}\n                                alt=\"movie poster\"/>\n                    <div className=\"oswald-font\">\n                        <p className=\"red-text\">Genres</p>\n                        <ul>\n                            {/* Maps over each genre that matches the movie in the joined returned SQL data */}\n                            {this.props.reduxState.genres.map(type => <li>{type.name}</li>)}\n                        </ul>\n                    </div>\n                    <div id=\"description-text\">\n                        <p> {this.props.reduxState.movieToDetail.description}</p>\n                    </div>\n                    <div calssName=\"button-flex-row\">\n                        <button className=\"edit-button\" onClick={()=> this.props.history.push('/edit')}>Edit</button>\n                        <button className=\"return-button\" onClick={(event) => this.props.history.push('/')}>Back to List</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n//loads redux state\nconst mapReduxStateToProps = (reduxState) => ({\n    reduxState\n  });\n\nexport default connect(mapReduxStateToProps)(Details);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../App/App.css';\n\n\nclass List extends Component {\n    componentDidMount() {\n        this.props.dispatch({type: 'FETCH_POSTERS'});\n    }\n\n    // On poster click, fills redux state with values and routes to details page\n    handleClick(film) {\n        this.props.dispatch({type: 'GET_DETAILS', payload: film})\n        this.props.dispatch({type:'FETCH_GENRES', payload: film.id})\n        this.props.history.push('/details');\n    }\n\n    render() {\n        return(\n                <div className=\"poster-space\">\n                    {this.props.reduxState.movies.map(film => \n                            <div className=\"poster-card\" key={film.id}>\n                                <img \n                                    style = {{width: \"185px\", height: \"270px\"}}\n                                    src={film.poster}\n                                    alt=\"movie poster\" \n                                    onClick={(event)=> this.handleClick(film)}/>\n                                <h4>{film.title}</h4>\n                            </div>\n                        )\n                    }\n                </div>\n        )\n    }\n}\n\n//loads redux state\nconst mapReduxStateToProps = (reduxState) => ({\n    reduxState\n  });\n\nexport default connect(mapReduxStateToProps)(List);","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    \n    render() {\n        return(\n            <div className=\"footer-style\">\n                <p>\"Fancy, Old Fashioned Theater Seats\" by BenjaminThompson is licensed under CC BY-NC-ND 2.0</p>\n            </div>\n        )\n    }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Edit extends Component {\n    \n    render() {\n        return(\n            <div className=\"backing\">\n                <h1>Edit Movie Information</h1>\n                <form>\n                    <div>\n                        <label className=\"oswald-text\">Movie Title:</label><br/>\n                        <input class=\"title-input\" type=\"text\" defaultValue={this.props.reduxState.movieToDetail.title}/>\n                    </div>\n                    <div>\n                        <label className=\"oswald-text\">Movie Poster URL:</label><br/>\n                        <input class=\"url-input\" type=\"text\" defaultValue={this.props.reduxState.movieToDetail.poster}/>\n                    </div>\n                    <div>\n                        <label className=\"oswald-text\">Movie Description:</label> <br/>\n                        <textarea className=\"description-textarea\" defaultValue={this.props.reduxState.movieToDetail.description}/>\n                    </div>\n                    <div>\n                        <label className=\"oswald-text\">Movie genres</label><br/>\n                        <input type=\"checkbox\" name=\"Adventure\" value=\"1\"/>\n                        <label for=\"Adventure\">Adventure</label>\n                        <input type=\"checkbox\" name=\"Animated\" value=\"2\"/>\n                        <label for=\"Animated\">Animated</label>\n                        <input type=\"checkbox\" name=\"Biographical\" value=\"3\"/>\n                        <label for=\"Biographical\">Biographical</label>\n                        <input type=\"checkbox\" name=\"Comedy\" value=\"4\"/>\n                        <label for=\"Comedy\">Comedy</label>\n                        <input type=\"checkbox\" name=\"Disaster\" value=\"5\"/>\n                        <label for=\"Disaster\">Disaster</label>\n                        <input type=\"checkbox\" name=\"Drama\" value=\"6\"/>\n                        <label for=\"Drama\">Drama</label>\n                        <input type=\"checkbox\" name=\"Epic\" value=\"7\"/>\n                        <label for=\"Epic\">Epic</label>\n                        <input type=\"checkbox\" name=\"Fantasy\" value=\"8\"/>\n                        <label for=\"Fantasy\">Fantasy</label>\n                        <input type=\"checkbox\" name=\"Musical\" value=\"9\"/>\n                        <label for=\"Musical\">Musical</label>\n                        <input type=\"checkbox\" name=\"Romantic\" value=\"10\"/>\n                        <label for=\"Romantic\">Romantic</label>\n                        <input type=\"checkbox\" name=\"Science Fiction\" value=\"11\"/>\n                        <label for=\"Science Fiction\">Science Fiction</label>\n                        <input type=\"checkbox\" name=\"Space Opera\" value=\"12\"/>\n                        <label for=\"Space Opera\">Space Opera</label>\n                        <input type=\"checkbox\" name=\"Superhero\" value=\"13\"/>\n                        <label for=\"Superhero\">Superhero</label>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\n//loads redux state\nconst mapReduxStateToProps = (reduxState) => ({\n    reduxState\n  });\n\nexport default connect(mapReduxStateToProps)(Edit);","import React, { Component } from 'react';\nimport {HashRouter as Router, Route, Link} from 'react-router-dom';\nimport './App.css';\nimport Header from '../Header/Header';\nimport AddMovie from '../AddMovie/AddMovie';\nimport Details from '../Details/Details';\nimport List from '../List/List';\nimport Footer from '../Footer/Footer';\nimport Edit from '../Edit/Edit';\n\nclass App extends Component {\n  // Renders the entire app on the DOM\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Header />\n        <div>\n          {/* nav bar */}\n          <nav className=\"topnav\">\n                <Link to='/'>Home</Link>\n                <Link to='/add-movie'>Add Movie</Link>\n          </nav>\n        </div>\n          <Route exact path='/' component={List} />\n          <Route path='/details' component={Details} />\n          <Route path='/add-movie' component={AddMovie} />\n          <Route path='/edit' component={Edit} />\n        </Router>\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\n// Provider allows us to use redux within our react app\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\n// Import saga middleware\nimport createSagaMiddleware from 'redux-saga';\nimport {takeEvery, put} from 'redux-saga/effects';\nimport Axios from 'axios'\n\n// Create the rootSaga generator function\nfunction* rootSaga() {\n    yield takeEvery('FETCH_POSTERS', fetchPosters);\n    yield takeEvery('FETCH_GENRES', fetchGenres);\n    yield takeEvery('POST_MOVIE', postMovies);\n}\n\n// Create sagaMiddleware\nconst sagaMiddleware = createSagaMiddleware();\n\n//Makes GET request for movie route\nfunction* fetchPosters() {\n    try {\n        const response = yield Axios.get('/api/movie');\n        yield put({type: 'SET_MOVIES', payload: response.data})\n    } catch (error) {\n        console.log('error getting movie posters', error);\n    }\n};\n\n//Makes GET request for Genre route\nfunction* fetchGenres(action) {\n    try {\n        const response = yield Axios.get('/api/genre/' + action.payload);\n        yield put({type: 'SET_GENRES', payload: response.data})\n    } catch (error) {\n        console.log('error getting genres', error)\n    }\n}\n\n//makes POST request to movie route\nfunction* postMovies(action) {\n    try {\n    yield Axios.post('/api/movie', action.payload);\n    } catch (error) {\n        console.log('error posting new movie', error)\n    }\n}\n\n// Used to store movies returned from the server in redux\nconst movies = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_MOVIES':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n// Used to store the movie genres from the server in redux\nconst genres = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_GENRES':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n// Used to store specific movie to detail in details page in the redux state\nconst movieToDetail = (state = [], action) => {\n    if (action.type === 'GET_DETAILS') {\n        return action.payload;\n    }\n    return state;\n}\n\n//Reducers to hold form data to pass to db on submit\nconst setTitle = (state='', action) => {\n    if(action.type === 'SET_TITLE'){\n        return action.payload;\n    }else if(action.type === 'CLEAR_FORMDATA') {\n        return '';\n    }\n    return state;\n}\n\nconst setURL = (state='', action) => {\n    if(action.type === 'SET_URL'){\n        return action.payload;\n    }else if(action.type === 'CLEAR_FORMDATA') {\n        return '';\n    }\n    return state;\n}\n\nconst setDescription = (state='', action) => {\n    if(action.type === 'SET_DESCRIPTION'){\n        return action.payload;\n    }else if(action.type === 'CLEAR_FORMDATA') {\n        return '';\n    }\n    return state;\n}\n\nconst setGenre = (state='', action) => {\n    if(action.type === 'SET_GENRE'){\n        return action.payload;\n    }else if(action.type === 'CLEAR_FORMDATA') {\n        return '';\n    }\n    return state;\n}\n\n\n// Create one store that all components can use\nconst storeInstance = createStore(\n    combineReducers({\n        movies,\n        genres,\n        movieToDetail,\n        setTitle,\n        setURL,\n        setDescription,\n        setGenre\n    }),\n    // Add sagaMiddleware to our store\n    applyMiddleware(sagaMiddleware, logger),\n);\n\n// Pass rootSaga into our sagaMiddleware\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(<Provider store={storeInstance}><App /></Provider>, \n    document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}